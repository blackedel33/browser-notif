{"version":3,"sources":["BrowserNotif.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","BrowserNotif","options","this","notifOptions","timeout","_setOptions","isSupported","console","warn","value","option","indexOf","callback","_this","Notification","requestPermission","permission","title","body","_this2","_notify","notification","_closeNotification","setTimeout","close","bind","_this3","onclick","_this4","onerror","window"],"mappings":"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","file":"BrowserNotif.min.js","sourcesContent":["/**\n*  BrowserNotif.JS\n*  (c) 2016 Ipan Ardian\n*\n*  Lets a web page send notifications that are displayed outside the page at the system level.\n*  This lets web apps send information to a user even if the application is idle, in the background, switched tabs or moved to a different app.\n*  For details, see the web site: https://github.com/ipanardian/browser-notif\n*  The MIT License\n*/\n/// <reference path='Notification.d.ts' />\n\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BrowserNotif = function () {\n    /**\n     * BrowserNotif constructor\n     * @param  {BrowserNotifOptions} options Optional config in object literal form\n     * e.g {icon: 'image.png', timeout: 10}\n     */\n    function BrowserNotif(options) {\n        _classCallCheck(this, BrowserNotif);\n\n        /**\n         * BrowserNotif configuration\n         * @type {BrowserNotifOptions}\n         */\n        this.options = {};\n        /**\n         * Notification Options\n         * @type {NotificationOptions}\n         */\n        this.notifOptions = {};\n        /**\n         * How long notification will appear in second. Set to 0 to make always visible\n         * @type {number}\n         */\n        this.timeout = 0;\n        if (options) {\n            _extends(this.options, options);\n        }\n        this._setOptions(this.options);\n        if (options.timeout) {\n            this.timeout = options.timeout;\n        }\n        if (!BrowserNotif.isSupported()) {\n            console.warn('This browser does not support system notifications');\n        }\n    }\n    /**\n     * Check is browser support for system notification\n     * @return {boolean}\n     */\n\n\n    _createClass(BrowserNotif, [{\n        key: \"_setOptions\",\n\n        /**\n         * Set notification options\n         * @param {BrowserNotifOptions} options\n         */\n        value: function _setOptions(options) {\n            for (var option in options) {\n                if (['timeout'].indexOf(option) == -1) {\n                    this.notifOptions[option] = options[option];\n                }\n            }\n        }\n        /**\n         * Get request permission\n         * @param  {string} callback\n         * @return {BrowserNotif}\n         */\n\n    }, {\n        key: \"requestPermission\",\n        value: function requestPermission(callback) {\n            var _this = this;\n\n            Notification.requestPermission(function (permission) {\n                if (typeof callback === 'function') {\n                    callback.call(_this, permission);\n                }\n            });\n            return this;\n        }\n        /**\n         * Trigger notify\n         * @param  {string} title\n         * @param  {string} body\n         * @param  {Event}  callback\n         * @return {BrowserNotif}\n         */\n\n    }, {\n        key: \"notify\",\n        value: function notify(title, body, callback) {\n            var _this2 = this;\n\n            if (!BrowserNotif.isSupported()) {\n                return this;\n            }\n            this.title = title;\n            this.notifOptions.body = body;\n            if (\"granted\" === Notification.permission) {\n                this._notify(callback);\n            } else if ('denied' !== Notification.permission) {\n                this.requestPermission(function (permission) {\n                    if (\"granted\" === permission) {\n                        _this2._notify(callback);\n                    }\n                });\n            } else {\n                console.warn('User denied the notification permission');\n            }\n            return this;\n        }\n        /**\n         * Create an instance of Notification API\n         * @param  {Notification} callback\n         * @return {[type]}\n         */\n\n    }, {\n        key: \"_notify\",\n        value: function _notify(callback) {\n            this.notification = new Notification(this.title, this.notifOptions);\n            this._closeNotification();\n            if (typeof callback === 'function') {\n                callback.call(this, this.notification);\n            }\n        }\n        /**\n         * Close an instance of Notification automatically by given timeout\n         */\n\n    }, {\n        key: \"_closeNotification\",\n        value: function _closeNotification() {\n            if (this.timeout > 0 && this.notification instanceof Notification) {\n                setTimeout(this.notification.close.bind(this.notification), this.timeout * 1e3);\n            }\n        }\n        /**\n         * Click event on Notification\n         * @param  {}  callback\n         * @return {BrowserNotif}\n         */\n\n    }, {\n        key: \"click\",\n        value: function click(callback) {\n            var _this3 = this;\n\n            if (typeof callback === 'function' && this.notification instanceof Notification) {\n                this.notification.onclick = function () {\n                    callback.call(_this3);\n                };\n            }\n            return this;\n        }\n        /**\n         * Close an instance of Notification\n         */\n\n    }, {\n        key: \"close\",\n        value: function close() {\n            if (this.notification instanceof Notification) {\n                this.notification.close();\n            }\n        }\n        /**\n         * Error of Notification\n         * @param  {}  callback\n         * @return {BrowserNotif}\n         */\n\n    }, {\n        key: \"error\",\n        value: function error(callback) {\n            var _this4 = this;\n\n            if (typeof callback === 'function' && this.notification instanceof Notification) {\n                this.notification.onerror = function () {\n                    callback.call(_this4);\n                };\n            }\n            return this;\n        }\n    }], [{\n        key: \"isSupported\",\n        value: function isSupported() {\n            if (!(\"Notification\" in window)) {\n                return false;\n            }\n            return true;\n        }\n    }]);\n\n    return BrowserNotif;\n}();"]}